const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è package.json
function readPackageJson() {
  const packagePath = path.join(__dirname, '..', 'package.json');
  const packageContent = fs.readFileSync(packagePath, 'utf8');
  return JSON.parse(packageContent);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ package.json
function writePackageJson(packageData) {
  const packagePath = path.join(__dirname, '..', 'package.json');
  const packageContent = JSON.stringify(packageData, null, 2) + '\n';
  fs.writeFileSync(packagePath, packageContent, 'utf8');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–µ—Ä—Å–∏–∏
function parseVersion(version) {
  const parts = version.split('.');
  return {
    major: parseInt(parts[0]),
    minor: parseInt(parts[1]),
    patch: parseInt(parts[2])
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ—Ä—Å–∏–∏
function formatVersion(versionObj) {
  return `${versionObj.major}.${versionObj.minor}.${versionObj.patch}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
function bumpVersion(currentVersion, bumpType = 'patch') {
  const version = parseVersion(currentVersion);
  
  switch (bumpType) {
    case 'major':
      version.major++;
      version.minor = 0;
      version.patch = 0;
      break;
    case 'minor':
      version.minor++;
      version.patch = 0;
      break;
    case 'patch':
    default:
      version.patch++;
      break;
  }
  
  return formatVersion(version);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
function determineBumpType() {
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º patch –≤–µ—Ä—Å–∏—é
  // –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥–µ
  return 'patch';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
function updateVersion(bumpType = null) {
  try {
    const packageData = readPackageJson();
    const currentVersion = packageData.version;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    const actualBumpType = bumpType || determineBumpType();
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é
    const newVersion = bumpVersion(currentVersion, actualBumpType);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º package.json
    packageData.version = newVersion;
    writePackageJson(packageData);
    
    console.log(`‚úÖ Version updated: ${currentVersion} ‚Üí ${newVersion} (${actualBumpType})`);
    
    return newVersion;
  } catch (error) {
    console.error('‚ùå Failed to update version:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
function getCurrentVersion() {
  const packageData = readPackageJson();
  return packageData.version;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏
function setVersion(version) {
  try {
    const packageData = readPackageJson();
    const oldVersion = packageData.version;
    
    packageData.version = version;
    writePackageJson(packageData);
    
    console.log(`‚úÖ Version set: ${oldVersion} ‚Üí ${version}`);
    
    return version;
  } catch (error) {
    console.error('‚ùå Failed to set version:', error.message);
    throw error;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
module.exports = {
  updateVersion,
  getCurrentVersion,
  setVersion,
  bumpVersion,
  parseVersion
};

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const args = process.argv.slice(2);
  const command = args[0];
  
  switch (command) {
    case 'bump':
      const bumpType = args[1] || 'patch';
      updateVersion(bumpType);
      break;
    case 'set':
      const version = args[1];
      if (!version) {
        console.error('‚ùå Version required: node version-manager.js set <version>');
        process.exit(1);
      }
      setVersion(version);
      break;
    case 'current':
      console.log(`üì¶ Current version: ${getCurrentVersion()}`);
      break;
    default:
      console.log('üìã Version Manager Usage:');
      console.log('  node version-manager.js bump [patch|minor|major]  - Increase version');
      console.log('  node version-manager.js set <version>            - Set specific version');
      console.log('  node version-manager.js current                  - Show current version');
      console.log('');
      console.log('üì¶ Current version:', getCurrentVersion());
  }
}
